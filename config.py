from aiogram.types import BotCommand
from dotenv import load_dotenv, find_dotenv
from collections import OrderedDict
from datetime import datetime
import os

load_dotenv(find_dotenv())

TOKEN = os.getenv("TOKEN")

my_commands: list[BotCommand] = [
    BotCommand(command="start", description="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand(command="category_articles", description="üìö –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    BotCommand(command="get_category_name", description="üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É"),
    BotCommand(command="all_categories", description="üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"),
]


class LRUDict(OrderedDict):
    """
    –°–ª–æ–≤–∞—Ä—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    """

    def __init__(self, max_size: int = 100, *args, **kwargs):
        self.max_size: int = max_size
        super().__init__(*args, **kwargs)

    def __setitem__(self, key, value):
        super().__setitem__(key, value)
        self._check_size()

    def _check_size(self):
        while len(self) > self.max_size:
            self.popitem(last=False)  # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç


def timer(func):
    async def wrapper(*args, **kwargs):
        start_time: float = datetime.now().timestamp()
        result: any = await func(*args, **kwargs)
        end_time: float = datetime.now().timestamp()
        print(f'Function {func.__name__} executed in {end_time - start_time} seconds.')
        return result

    return wrapper


__all__ = ["TOKEN", "timer", "LRUDict"]
