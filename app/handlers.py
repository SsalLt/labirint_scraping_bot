from aiogram.types.input_file import FSInputFile, BufferedInputFile
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import F, Router
from pathlib import Path
from io import BytesIO
import json
import csv
from scraping_core.get_categories import update_categories
from scraping_core.get_category_info import collect_data
from app.my_states import ParseState
import app.keyboards as kb

router = Router()
user_data_cache: dict = {}


@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
                         f"–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–∏ÃÜ—Ç–∞ labirint.ru",
                         reply_markup=kb.main)


@router.message(F.text == "üî¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
async def get_categories(message: Message):
    file_path = Path(__file__).parent.parent / "categories.json"

    if file_path.exists():
        json_file = FSInputFile(file_path, filename="categories.json")
        await message.answer_document(
            document=json_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
            reply_markup=kb.categories_list_kb
        )
    else:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "csv_format")
async def get_categories_as_csv(callback: CallbackQuery):
    file_path = Path(__file__).parent.parent / "categories.csv"

    if file_path.exists():
        csv_file = FSInputFile(file_path, filename="categories.csv")
        await callback.answer()
        await callback.message.answer_document(
            document=csv_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
        )
    else:
        await callback.answer()
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "txt_format")
async def get_categories_as_txt(callback: CallbackQuery):
    file_path = Path(__file__).parent.parent / "categories.txt"

    if file_path.exists():
        txt_file = FSInputFile(file_path, filename="categories.txt")
        await callback.answer()
        await callback.message.answer_document(
            document=txt_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT"
        )
    else:
        await callback.answer()
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("update_categories"))
async def update_categories_handler(message: Message):
    await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    await update_categories()
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.message(F.text == "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_category_request(message: Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(ParseState.waiting_genre)


@router.message(ParseState.waiting_genre)
async def process_genre(message: Message, state: FSMContext):
    try:
        genre_id: int = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await message.answer("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        data: list[dict] = await collect_data(genre_id)
        user_data_cache[genre_id] = data

        json_file = BytesIO()
        json_file.write(json.dumps(data, ensure_ascii=False, indent=4).encode('utf-8'))
        json_file.seek(0)

        await message.answer_document(
            BufferedInputFile(
                json_file.read(),
                filename=f"labirint_{genre_id}.json"
            ),
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ!",
            reply_markup=kb.csv_inline(genre_id=genre_id)
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
