import aiohttp
from aiogram.types.input_file import FSInputFile, BufferedInputFile
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import F, Router
from pathlib import Path
from io import BytesIO, StringIO
import json
import csv

from config import LRUDict
from scraping_core.scraping_functions import get_category_name
from scraping_core.get_categories import update_categories
from scraping_core.get_category_info import collect_data
from app.my_states import ParseState, ParseGenreForCheck
import app.keyboards as kb

router = Router()
user_data_cache: LRUDict = LRUDict(max_size=20)


@router.message(Command("start"))
@router.message(F.text == "–ù–∞–∑–∞–¥ ‚Ü©")
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
                         f"–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–∏ÃÜ—Ç–∞ labirint.ru",
                         reply_markup=kb.main)


@router.message(F.text == "üî¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
@router.message(Command("all_categories"))
async def get_categories(message: Message):
    file_path = Path(__file__).parent.parent / "categories.json"

    if file_path.exists():
        json_file = FSInputFile(file_path, filename="categories.json")
        await message.answer_document(
            document=json_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
            reply_markup=kb.categories_list_kb
        )
    else:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "csv_format")
async def get_categories_as_csv(callback: CallbackQuery):
    file_path = Path(__file__).parent.parent / "categories.csv"

    if file_path.exists():
        csv_file = FSInputFile(file_path, filename="categories.csv")
        await callback.answer()
        await callback.message.answer_document(
            document=csv_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
        )
    else:
        await callback.answer()
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "txt_format")
async def get_categories_as_txt(callback: CallbackQuery):
    file_path = Path(__file__).parent.parent / "categories.txt"

    if file_path.exists():
        txt_file = FSInputFile(file_path, filename="categories.txt")
        await callback.answer()
        await callback.message.answer_document(
            document=txt_file,
            caption="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT"
        )
    else:
        await callback.answer()
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("update_categories"))
async def update_categories_handler(message: Message):
    await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    await update_categories()
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.message(F.text == "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
@router.message(Command("category_articles"))
async def handle_category_request(message: Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.back_to_main)
    await state.set_state(ParseState.waiting_genre)


@router.message(ParseState.waiting_genre)
async def process_genre(message: Message, state: FSMContext):
    try:
        genre_id: int = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    try:
        category: None | tuple[str, dict] = user_data_cache.get(genre_id)
        if category:
            category_name, data = category
        else:
            await message.answer("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
                                 reply_markup=kb.remove)

            category: None | tuple[str, dict] = await collect_data(genre_id)
            if not category:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "
                                     f"(–ö–æ–º–∞–Ω–¥–æ–π /get_category_name –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.labirint.ru/genres/{genre_id}/).",
                                     reply_markup=kb.main)
                return
            category_name, data = category
            user_data_cache[genre_id] = category_name, data

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã", reply_markup=kb.main)
        await message.answer_document(
            BufferedInputFile(
                json.dumps(data, ensure_ascii=False, indent=4).encode('utf-8'),
                filename=f"labirint_genre_{genre_id}.json",
            ),
            caption=category_name,
            reply_markup=kb.csv_inline(genre_id=genre_id)
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", reply_markup=kb.main)
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("csv_"))
async def send_csv(callback: CallbackQuery):
    genre_id: int = int(callback.data.split("_")[1])
    category: None | tuple[str, dict] = user_data_cache.get(genre_id)

    if not category:
        await callback.answer()
        await callback.message.answer("üö´ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    try:
        category_name, data = category
        text_buffer = StringIO()
        text_buffer.write('\ufeff')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ BOM –¥–ª—è Excel
        writer = csv.writer(
            text_buffer,
            delimiter=';',
            quoting=csv.QUOTE_ALL,  # —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏—è
            lineterminator='\r\n'  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –¥–ª—è Windows
        )

        writer.writerow([
            '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞', '–ê–≤—Ç–æ—Ä',
            '–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞', '–°–∫–∏–¥–∫–∞'
        ])

        for item in data:
            writer.writerow([
                str(item.get('book_title', '')).replace(';', ','),
                str(item.get('book_link', '')),
                str(item.get('book_author', '')),
                str(item.get('book_publishing', '')),
                str(item.get('book_discounted_price', '')),
                str(item.get('book_old_price', '')),
                str(item.get('book_sale', ''))
            ])

        csv_data = text_buffer.getvalue().encode('utf-8-sig')  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ BOM

        bytes_buffer = BytesIO(csv_data)
        bytes_buffer.seek(0)

        await callback.message.answer_document(
            BufferedInputFile(
                bytes_buffer.read(),
                filename=f"labirint_genre_{genre_id}.csv"
            )
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.message(F.text == "üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É")
@router.message(Command("get_category_name"))
async def get_category_name_handler(message: Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.back_to_main)
    await state.set_state(ParseGenreForCheck.waiting_genre)


@router.message(ParseGenreForCheck.waiting_genre)
async def process_genre(message: Message, state: FSMContext):
    try:
        genre_id: int = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://www.labirint.ru/genres/{genre_id}"
            data: dict[int: str] | None = await get_category_name(session=session,
                                                                  url=url,
                                                                  page=genre_id)
            if not data:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞.",
                                     reply_markup=kb.main)
                return

        await message.answer(f"#‚É£  –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {genre_id}\n"
                             f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {data.get(genre_id)}",
                             reply_markup=kb.main)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
